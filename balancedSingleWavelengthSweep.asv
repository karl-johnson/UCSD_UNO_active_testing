% single wavelength sweep where we change two heaters at the same time 
% does NOT include laser code as laser is broken :(
% for now, just writing code specially for one of these being keithley and
% one of these being keysight
delete (instrfindall); % Delete all existing instruments
laser = start_laser(); % Initialize and connect laser
key = key_start(); % Initialize and connect keithley
kes = kes_start();
%% %% Acquisition Settings %% %%
% REMEMBER TO UPDATE LAMBDA MANUALLY!
lambda = 1595e-9;
% time to wait after changing power supply prior to taking measurements
settle_time = 0.5; % seconds

P_start = 0; % mW
P_end = 1000; % mW
P_step = 1; % mW
P_list_increasing = 0:P_step:P_end;
P_list_decreasing = P_end:-P_step:0;
% assign power lists to instruments
kes_power_list = P_list_increasing;
key_power_list = P_list_decreasing;

% complaince settings - power supplies never exceed either of these
I_compliance = 11; % mA
V_compliance = 130; % volts
%% %% Run Acquisition %% %%

% might need to set kes output voltage nonzero here?
key_resistance = key_measure_resistance(key);
kes_resistance = kes_measure_resistance(kes);
% units: V = sqrt(ohm*W) -> V = sqrt(ohm*mW/1000)
key_voltage_list = sqrt(key_resistance*(key_power_list/1000));
kes_voltage_list = sqrt(kes_resistance*(kes_power_list/1000));
sweep_number = length(key_voltage_list); 
if(length(kes_voltage_list) ~= length(key_voltage_list))
    error("Keithley and Keysight voltage lists are not the same length");
end
% safety warnings
key_max_voltage = max(key_voltage_list);
key_est_max_current = 1000*key_max_voltage/key_resistance;
disp(['Measured Keithley resistance (ohm): ' num2str(key_resistance,4)]);
if(key_resistance > 1e6)
    error('Keithley Load resistance greater than 1 Mohm, likely open circuit.');
end 
disp(['Max Keithley voltage to be applied: ' num2str(key_max_voltage,4)]);
if(key_max_voltage > V_compliance)
    warning("Specified power sweep will exceed compliance voltage on Keithley!");
    disp(['Compliance voltage: ' num2str(V_compliance,4)]);
    disp('If you continue, the output (and therefore the power) will be limited by the compliance voltage.');
    response = input('Continue (y/n)','s');
    if(response ~= 'y')
        return
    end 
end
disp(['Estimated max Keithley current (mA): ' num2str(key_est_max_current,4)]);
if((key_est_max_current) > I_compliance)
    warning("Specified power sweep might exceed compliance current!");
    disp(['Compliance current: ' num2str(I_compliance)]);
    disp('If you continue, the output (and therefore the power) will be limited by the compliance current.');
    response = input('Continue (y/n)','s');
    if(response ~= 'y')
        return
    end
end

kes_max_voltage = max(kes_voltage_list);
kes_est_max_current = 1000*kes_max_voltage/kes_resistance;
disp(['Measured Keysight resistance (ohm): ' num2str(kes_resistance,4)]);
if(kes_resistance > 1e6)
    error('Keysight Load resistance greater than 1 Mohm, likely open circuit.');
end 
disp(['Max Keysight voltage to be applied: ' num2str(kes_max_voltage,4)]);
if(kes_max_voltage > V_compliance)
    warning("Specified power sweep will exceed compliance voltage on Keysight!");
    disp(['Compliance voltage: ' num2str(V_compliance,4)]);
    disp('If you continue, the output (and therefore the power) will be limited by the compliance voltage.');
    response = input('Continue (y/n)','s');
    if(response ~= 'y')
        return
    end 
end
disp(['Estimated max Keysight current (mA): ' num2str(kes_est_max_current,4)]);
if((kes_est_max_current) > I_compliance)
    warning("Specified power sweep might exceed compliance current!");
    disp(['Compliance current: ' num2str(I_compliance)]);
    disp('If you continue, the output (and therefore the power) will be limited by the compliance current.');
    response = input('Continue (y/n)','s');
    if(response ~= 'y')
        return
    end
end
% Configure power supplies as voltage sources with the provided compliance
kes_config_V_source(kes, I_compliance);
key_config_V_source(key, I_compliance);
% Set voltage to 0 for safety before turning on
kes_set_V(kes, 0);
key_set_V(key, 0);
% Pre-generate a couple save arrays
key_measured_V = zeros(length(key_voltage_list), 1);
key_measured_I = zeros(length(key_voltage_list), 1);
kes_measured_V = zeros(length(key_voltage_list), 1);
kes_measured_I = zeros(length(key_voltage_list), 1); 
optical_power = zeros(length(key_voltage_list), 1); 

% Setting at beginning 
middle_index = round(sweep_number/2);
% WARNING THIS DISRESPECTS VOLTAGE COMPLI

% Turn outputs on
kes_output(kes, true);
key_output(key, true);
    
for v_index = 1:sweep_number

    % Get voltage, respecting compliance
    key_voltage_point = key_voltage_list(v_index);

    if(key_voltage_point > V_compliance)
        warning(['Keithley voltage compliance triggered! Compliance voltage '...
            num2str(v_comp) ' V used instead of requested voltage '...
            num2str(key_voltage_point) 'V']);
        key_voltage_point = v_comp;
    end
    % Set Keysight to voltage point
    key_set_V(key, key_voltage_point);

    kes_voltage_point = kes_voltage_list(v_index);
    if(kes_voltage_point > V_compliance)
        warning(['Keysight voltage compliance triggered! Compliance voltage '...
            num2str(v_comp) ' V used instead of requested voltage '...
            num2str(kes_voltage_point) 'V']);
        kes_voltage_point = v_comp;
    end
    % Set Keithley to voltage point
    kes_set_V(kes, kes_voltage_point);
    if(v_index == 1)
        disp("Initial settling time...");
        pause(3);
    end
    pause(settle_time);

    % Measure actual voltage and current after settling
    [key_measured_V(v_index), key_measured_I(v_index)] = key_measure(key);
    [kes_measured_V(v_index), kes_measured_I(v_index)] = kes_measure(kes);
    optical_power(v_index) = laser_get_power(laser);

    % check if we're hitting i compliance
    if(key_measured_I(v_index) >= I_compliance)
        warning('Keithley measured current equals current compliance, current compliance likely triggered!');
    end
    if(kes_measured_I(v_index) >= I_compliance)
        warning('Keithley measured current equals current compliance, current compliance likely triggered!');
    end

    % Update user with progress
    fprintf("Measurement %d of %d complete (Keysight %1.1f mW, Keithley %1.1f mW) \n", ...
        v_index, sweep_number, ...
        kes_measured_V(v_index)*kes_measured_I(v_index), ...
        key_measured_V(v_index)*key_measured_I(v_index));
end
    
% Turn outputs off
kes_output(kes, false);
key_output(key, false);

% Calculate actual power (in mW) off of all the individual measurements
key_measured_P = key_measured_I.*key_measured_V;
kes_measured_P = kes_measured_I.*kes_measured_V;
        
        
%% Plot Result %%
figure; hold on;
yyaxis left;
plot(key_measured_P, "DisplayName", "Keithley");
plot(kes_measured_P, "DisplayName", "Keysight");
ylabel("Applied Power (mW)");
yyaxis right;
plot(10*log10(optical_power));
ylabel("Measured Optical Power (mW)");
hold off; legend;
%% Plot resistances %%
figure; hold on;
plot(key_measured_V./key_measured_I, "DisplayName", "Keithley");
plot(kes_measured_V./kes_measured_I, "DisplayName", "Keysight");
hold off;
legend;
    %% %% Save Result %% %%
% Saves all variables into .mat file (locat. picked using GUI)
% Variables that are probably the most useful:
% - measured_I, measured_P, and measured_V give the actual
%   current/power/voltage output by the Keithley at the beginning of each
%   spectrum measurement, regardless of sweep mode
% - global_params.results gives the transmitted power (in W) at each
%   heater sampling point
[output_filename, output_path] = uiputfile('*', 'Select location to save data:');
if(output_filename)
    save(strcat(output_path,output_filename));
else
    disp("File save cancelled");
end

%% %% Plot Result %% %%
laser_power_mW = 10^(laser_power/10);
plot(measured_P, 10*log10(global_params.results/laser_power_mW));
xlabel("Heater Power (mW)");
ylabel("Transmission (dB)");

